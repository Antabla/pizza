<?php /** 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://beta.skaffolder.com/#!/register?friend=5d35f8d6d011cc097f0543fe
*
* You will get 10% discount for each one of your friends
* 
*/
?>
<?php
	require_once './db/dbpizza_dbManager.php';
	
/*
 * SCHEMA DB productos
 * 
	{
		cantidad: {
			type: 'Integer'
		},
		descripcion: {
			type: 'String'
		},
		nombre: {
			type: 'String'
		},
		precio: {
			type: 'Decimal'
		},
		stock: {
			type: 'Integer'
		},
		//RELAZIONI
		
		
		//RELAZIONI ESTERNE
		
		
	}
 * 
 */


//CRUD METHODS


//CRUD - CREATE


$app->post('/productos',	function () use ($app){

	$body = json_decode($app->request()->getBody());
	
	$params = array (
		'cantidad'	=> isset($body->cantidad)?$body->cantidad:'',
		'descripcion'	=> isset($body->descripcion)?$body->descripcion:'',
		'nombre'	=> isset($body->nombre)?$body->nombre:'',
		'precio'	=> isset($body->precio)?$body->precio:'',
		'stock'	=> isset($body->stock)?$body->stock:'',
			);

	$obj = makeQuery("INSERT INTO productos (_id, cantidad, descripcion, nombre, precio, stock )  VALUES ( null, :cantidad, :descripcion, :nombre, :precio, :stock   )", $params, false);

	
	echo json_encode($body);
	
});
	
//CRUD - REMOVE

$app->delete('/productos/:id',	function ($id) use ($app){
	
	$params = array (
		'id'	=> $id,
	);

	makeQuery("DELETE FROM productos WHERE _id = :id LIMIT 1", $params);

});
	
//CRUD - GET ONE
	
$app->get('/productos/:id',	function ($id) use ($app){
	$params = array (
		'id'	=> $id,
	);
	
	$obj = makeQuery("SELECT * FROM productos WHERE _id = :id LIMIT 1", $params, false);
	
	
	
	echo json_encode($obj);
	
});
	
	
//CRUD - GET LIST

$app->get('/productos',	function () use ($app){
	makeQuery("SELECT * FROM productos");
});


//CRUD - EDIT

$app->post('/productos/:id',	function ($id) use ($app){

	$body = json_decode($app->request()->getBody());
	
	$params = array (
		'id'	=> $id,
		'cantidad'	    => isset($body->cantidad)?$body->cantidad:'',
		'descripcion'	    => isset($body->descripcion)?$body->descripcion:'',
		'nombre'	    => isset($body->nombre)?$body->nombre:'',
		'precio'	    => isset($body->precio)?$body->precio:'',
		'stock'	    => isset($body->stock)?$body->stock:''	);

	$obj = makeQuery("UPDATE productos SET  cantidad = :cantidad,  descripcion = :descripcion,  nombre = :nombre,  precio = :precio,  stock = :stock   WHERE _id = :id LIMIT 1", $params, false);

	
	echo json_encode($body);
    	
});


/*
 * CUSTOM SERVICES
 *
 *	These services will be overwritten and implemented in  Custom.js
 */

			
?>